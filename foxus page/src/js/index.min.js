webpackJsonp([0,1],[
/* 0 */
/***/ function(module, exports) {

	'use strict';

	/***********************base on es6***********************/
	;(function () {

	    function videoClips(proObj) {
	        return new videoClips.prototype.init(proObj);
	    }

	    videoClips.prototype = {
	        sClips: function sClips(_time) {
	            this.pointerMove(this.timeToFrom(_time));
	            _this.pointerTime.text(VC.timeTransform(_time));
	        },
	        timeToFrom: function timeToFrom(_time) {
	            for (var i = 0; i < this.length(); i++) {
	                var _curEndTime = VC.timeTransform(this.getEndTime(i).text());

	                if (_time <= _curEndTime) {
	                    var _curStartTime = VC.timeTransform(this.getStartTime(i).text());

	                    return parseInt(this.width * (i + (_time - _curStartTime) / (_curEndTime - _curStartTime)));
	                }
	            }
	        },

	        timeConversion: function timeConversion(_time, choice) {
	            var gap = 0;

	            if (choice) {
	                this.clipPart.forEach(function (item, index, args) {
	                    if (_time >= item.startTime && _time <= item.endTime) {
	                        this.visit.curTime = item.endTime;
	                    }

	                    if (_time >= item.endTime) {
	                        gap += item.endTime - item.startTime;
	                    }
	                });

	                return _time - gap;
	            } else {
	                var _curIndex = getCurClipIndex(_time);
	                var flagNum = this.clipItems().eq(_curIndex).attr('data-flag');

	                for (var i = 0; i < flagNum; i++) {
	                    gap = this.clipPart[i].endTime - this.clipPart[i].startTime;
	                }

	                return _time + gap;
	            }
	        },
	        startPlay: function startPlay() {
	            this.playBox.on('click', function () {
	                if (this.startFlag) return;

	                this.startFlag = false;

	                $('.vjs-progress-control').before('<div class="vjs-customize-progress vjs-control"><div class="vjs-progress-holder vjs-slider vjs-slider-horizontal"><span class="vjs-curschedule">00:00</span><div id="J_play-process" class="vjs-play-progress vjs-slider-bar"><span class="vjs-schedule">00:00</span></span><span class="vjs-control-text"><span>Progress</span>: 0%</span></div></div></div>').after('<div class="vjs-surplus" data-all=' + VC.timeTransform(config.duration) + ' data-role=' + VC.timeTransform(config.duration) + '>' + VC.timeTransform(config.duration) + '</div>');

	                this.progress = $('.vjs-progress-control');
	                this.curschedule = $('.vjs-curschedule');
	                this.schedule = $('.vjs-schedule');
	                this.progressBar = $('.vjs-customize-progress .vjs-progress-holder');

	                this.progress.mousemove(function (e) {
	                    this.curschedule.show();
	                    var _left = e.pageX - this.progressBar.offset().left;
	                    _left = _left > 0 ? _left : 0;
	                }).mouseout(function () {
	                    this.curschedule.hide();
	                }).mouseenter(function () {
	                    this.schedule.show();
	                }).mouseleave(function () {
	                    this.schedule.hide();
	                });

	                this.progressBar.on('click', function () {
	                    var curTime = VC.timeTransform(this.curschedule.text());
	                });
	            });
	        },
	        addClips: function addClips() {
	            var _this = this;

	            _this.clipBox.on('click', function () {
	                if (_this.startFlag) return;

	                if (_this.length() > 5) {
	                    alert('最多5个');
	                    return;
	                }

	                var curClipTime = _this.getPointerTime();
	                var _index = _this.getCurClipIndex(curClipTime);
	                var _cycle = 0;

	                var _timer = setInterval(function () {

	                    if (_cycle > 300) {
	                        throw new Error('视频加载失败！');
	                    }
	                    _cycle++;

	                    if (_this.myPlayer.readyState() == 4) {
	                        var _img = 'xxx.jpg';

	                        _this.clipItems().eq(_index).after('<li data-flag=' + (_this.clipItems(_index).attr('data-flag') || 0) + '><div class="clip-video"><img src="' + _img + '"></div><div class="clip-time"><span class="clip-time-start fl">' + VC.timeTransform(curClipTime) + '</span><span class="clip-time-end fr">' + _this.getEndTime(_index).text() + '</span></div><div class="clip-delete"><span></span></div></li>');
	                        _this.getEndTime(_index).text(VC.timeTransform(curClipTime));

	                        clearInterval(_timer);
	                    }
	                }, 100);
	            });
	        },
	        getCurClipIndex: function getCurClipIndex(_time) {
	            var clipItmes = this.clipItems();

	            for (var i = 0; i < this.length(); i++) {
	                var _MaxIndex = VC.timeTransform(this.getEndTime(i).text());
	                if (_MaxIndex >= _time) {
	                    return i;
	                }
	            }

	            return -1;
	        },
	        getPointerTime: function getPointerTime() {
	            return VC.timeTransform(this.pointer.text());
	        },
	        getStartTime: function getStartTime(index) {
	            if (this.length < index) {
	                index = -1;
	            }

	            return this.clipItems().eq(index).find('.clip-time-start');
	        },
	        getEndTime: function getEndTime(index) {
	            if (this.length < index) {
	                index = -1;
	            }

	            return this.clipItems().eq(index).find('.clip-time-end');
	        },
	        clipItems: function clipItems() {
	            return this.clipUlist.find('li');
	        },
	        length: function length() {
	            return this.clipItems().length;
	        },
	        pointerMove: function pointerMove(distance) {
	            var _length = this.length();
	            var totalLength = _length * this.width;
	            var goal = void 0;

	            if (distance > totalLength) {
	                goal = totalLength;
	            } else if (distance < 0) {
	                goal = 0;
	            } else {
	                goal = distance;
	            }

	            this.pointer.css({ left: goal });
	        },
	        pointerLocate: function pointerLocate(displacement) {
	            var _length = this.length();
	            var totalLength = _length * this.width;

	            if (displacement > totalLength) {
	                displacement = totalLength;
	            } else if (displacement < 0) {
	                displacement = 0;
	            }

	            var multiple = parseInt(displacement / this.width);
	            var residue = displacement % this.width;

	            var _curStart = VC.timeTransform(this.getStartTime(multiple).text());
	            var _curEnd = VC.timeTransform(this.getEndTime(multiple).text());

	            var _curTime = parseInt(residue / this.width * (_curEnd - _curStart)) + _curStart;

	            if (multiple === _length) {
	                _curTime = VC.timeTransform(this.getEndTime(-1).text());
	            }

	            return _curTime;
	        },
	        pointerdrop: function pointerdrop() {
	            var _this2 = this;

	            var _flag = false;
	            var _this = this;

	            _this.stick.on('mousedown', function () {
	                if (_this2.startFlag) return;

	                _this.myPlayer.pause();
	                dragEvent();
	                _flag = true;
	            });
	            $(document).on('mouseup', function (e) {
	                if (_this.startFlag || !_flag) return;

	                _this.myPlayer.play();
	                _flag = false;

	                dragEvent(true);
	            });

	            // The component of Drag
	            function dragEvent(_status) {
	                if (_status) {
	                    /*const _curTime = getPointerTime();
	                    const jumpTime = getDeleteTime(curTime);
	                    const _time = curTime + jumpTime;
	                      myPlayer.currentTime(_time);*/

	                    _this.viewport.unbind('mousemove');
	                } else {

	                    _this.viewport.on('mousemove', function (e) {
	                        var _left = e.pageX - _this.viewport.offset().left;
	                        var curTimeDistance = _this.pointerLocate(_left);

	                        _this.pointerMove(_left);
	                        _this.pointerTime.text(VC.timeTransform(curTimeDistance));
	                    });
	                }
	            }
	        },
	        start: function start() {
	            var _this = this;

	            this.myPlayer.ready(function () {
	                var that = this;

	                that.on('timeupdate', function () {

	                    if (that.duration() != 0 && that.currentTime() === that.duration()) {
	                        that.pause();
	                        visit.curTime = 0;
	                    }
	                });

	                _this.pointerdrop();
	                _this.addClips();
	                _this.startPlay();
	            });
	        }
	    };

	    var init = videoClips.prototype.init = function (proObj) {
	        this.startFlag = false;
	        this.myPlayer = proObj.myPlayer;
	        this.clipUlist = proObj.clipUlist;
	        this.pointer = proObj.pointer;
	        this.pointerTime = proObj.pointerTime;
	        this.viewport = proObj.viewport;
	        this.width = proObj.width;
	        this.stick = proObj.stick;
	        this.clipBox = proObj.clipBox;
	        this.playBox = proObj.playBox;

	        this.clipPart = [];
	        this.dataSave = [];

	        this.visit = {
	            get curTime() {
	                return curTime;
	            },
	            set curTime(value) {
	                this.myPlayer.currentTime(value);
	                sClips(timeConversion(value, true));
	            }
	        };

	        this.start();
	    };

	    var VC = videoClips;

	    VC.log = function (value) {
	        console.log(value);
	    };
	    VC.timeTransform = function (value) {
	        var _result = void 0;

	        if (value === 0 || Number(value)) {
	            var _hour = Math.floor(parseInt(value) / 3600);
	            var _minute = parseInt((parseInt(value) - _hour * 3600) / 60);
	            var _second = parseInt(value) % 60;

	            _result = supple(_hour) + ':' + supple(_minute) + ':' + supple(_second);
	        } else {
	            var _splitArr = value.split(':');

	            if (_splitArr.length < 3) {
	                _splitArr.unshift('00');
	            }

	            _result = parseInt(_splitArr[0] * 3600) + parseInt(_splitArr[1] * 60) + parseInt(_splitArr[2]);
	        }

	        return _result;

	        function supple(value) {
	            value = '' + value;

	            if (value.length === 1) {
	                value = '0' + value;
	            }

	            return value;
	        }
	    };

	    init.prototype = videoClips.prototype;

	    videoClips({
	        clipUlist: $('#J_clip-ulist'),
	        clipItems: $('#J_clip-ulist > li'),
	        pointer: $('#J_pointer'),
	        pointerTime: $('#J_cur-time'),
	        viewport: $('#J_viewport'),
	        width: $('#J_clip-ulist > li').eq(0).width(),
	        stick: $('#J_pointer-stick'),
	        myPlayer: videojs('example_video_1'),
	        clipBox: $('#J_clip-box'),
	        playBox: $('.vjs-poster, .vjs-big-play-button')
	    });

	    function log(value) {
	        console.log(value);
	    }
	})();
	/*;(function () {
	    let _startFlag = false;
	    const $clipItems = $('#J_clip-ulist');
	    const $pointer = $('#J_pointer');
	    const $J_viewport = $('#J_viewport');
	    const $curTime = $('#J_cur-time');
	    const _clipWidth = $clipItems.find('li').eq(0).width();
	    window.clipPart = [];

	    // finally result
	    window.dataSave = [];

	    // get set Data binding
	    const visit = {
	        get curTime () {
	            return curTime;
	        },
	        set curTime (value) {

	            // pointer positioning
	            /!*$('#J_cur-time').text(clipJump(value) >= 0 ? toSecond(clipJump(value), true) : '00:00:00');
	            pointerMove(clipMove(clipJump(value)));
	            progressBar(clipJump(value));

	            curTime = value;*!/
	        }
	    };

	    // The root of video
	    var myPlayer = videojs('example_video_1');
	    myPlayer.ready(function(){
	        var myPlayer = this;

	        myPlayer.on('timeupdate', function () {


	            if (myPlayer.duration() != 0 && myPlayer.currentTime() === myPlayer.duration()) {
	                myPlayer.pause();
	                visit.curTime = 0;
	            }
	        });
	    });

	    // pointer to drag
	    (function () {
	        let _flag = false;

	        $('#J_pointer-stick').on('mousedown', () => {
	            if (_startFlag) return;

	            /!*myPlayer.pause();*!/
	            dragEvent();
	            _flag = true;
	        });
	        $(document).on('mouseup', (e) => {
	            if (_startFlag || !_flag) return;

	            /!*myPlayer.play();*!/
	            _flag = false;

	            dragEvent(true);
	        });
	    })();

	    // Delete the clip
	    $clipItems.on('click', '.clip-delete > span',  (e) => {
	        const _index = $(e.target).parents('li').index();
	        const _start = $(e.target).parents('li').find('.clip-time-start').text();
	        const _end = $(e.target).parents('li').find('.clip-time-end').text();
	        const _s_start = toSecond(_start);
	        const _s_end = toSecond(_end);
	        const _subtraction = _s_end - _s_start;
	        const _allTime = toSecond($('.vjs-surplus').data('role'));

	        for (let i = 0; i < $('#J_clip-ulist > li').length; i++) {
	            if (i > _index) {
	                const startTime =  toSecond($('#J_clip-ulist > li').eq(i).find('.clip-time-start').text());
	                const endTime = toSecond($('#J_clip-ulist > li').eq(i).find('.clip-time-end').text());
	                let curFlag = $('#J_clip-ulist > li').eq(i).attr('data-flag') || 0;
	                curFlag++;

	                $('#J_clip-ulist > li').eq(i).find('.clip-time-start').text(toSecond(startTime - _subtraction, true));
	                $('#J_clip-ulist > li').eq(i).find('.clip-time-end').text(toSecond(endTime - _subtraction, true));
	                $('#J_clip-ulist > li').eq(i).attr('data-flag', curFlag);
	            }
	        }

	        addRemoveClips({
	            startTime: _s_start + getDeleteTime(_s_start),
	            endTime: _s_end + getDeleteTime(_s_start)
	        });

	        $('#J_clip-ulist').find('li').eq(_index).remove();
	        $('.vjs-surplus').attr('data-role', $('#J_clip-ulist > li').eq(-1).find('.clip-time-end').text());

	        clipSort();

	        myPlayer.pause();
	        myPlayer.currentTime(0);
	        setTimeout(function () {
	            myPlayer.play();
	        }, 500);

	    });

	    // start playing
	    $('.vjs-poster, .vjs-big-play-button').on('click', () => {

	        if (!_startFlag) return;

	        _startFlag = false;

	        $('.vjs-progress-control').before(`<div class="vjs-customize-progress vjs-control"><div class="vjs-progress-holder vjs-slider vjs-slider-horizontal"><span class="vjs-curschedule">00:00</span><div id="J_play-process" class="vjs-play-progress vjs-slider-bar"><span class="vjs-schedule">00:00</span></span><span class="vjs-control-text"><span>Progress</span>: 0%</span></div></div></div>`)
	            .after(`<div class="vjs-surplus" data-all=${toSecond(config.duration, true)} data-role=${toSecond(config.duration, true)}>${toSecond(config.duration, true)}</div>`);

	        $('.vjs-customize-progress').mousemove(function (e) {
	            $('.vjs-curschedule').show();
	            var _left = (e.pageX - $('.vjs-customize-progress .vjs-progress-holder').offset().left);
	            _left = _left > 0 ? _left : 0;

	            getAntiTime(_left);
	        }).mouseout(function () {
	            $('.vjs-curschedule').hide();
	        }).mouseenter(function () {
	            $('.vjs-schedule').show();
	        }).mouseleave(function () {
	            $('.vjs-schedule').hide();
	        });

	        $('.vjs-customize-progress .vjs-progress-holder').on('click', function() {
	            const curTime = toSecond($('.vjs-curschedule').text());
	            const jumpTime = getDeleteTime(curTime);
	            const _time = curTime + jumpTime;

	            myPlayer.currentTime(_time);
	        })
	    });


	    /!*************************************************************!/

	    // The component of Drag
	    function dragEvent(_status) {
	        if (_status) {
	            /!*const _curTime = timeTransform($curTime.text());
	            const _status = $curTime.attr('data-status');
	            /!*const jumpTime = getDeleteTime(curTime);
	            const _time = curTime + jumpTime;*!/

	            myPlayer.currentTime(_time);*!/

	            $J_viewport.unbind('mousemove');
	        } else {
	            $J_viewport.on('mousemove', (e) => {
	                let _left = e.pageX - $J_viewport.offset().left;
	                const curTimeDistance = PointerLocate(_left);
	                /!*log(curTimeDistance);*!/
	                pointerMove(_left);
	                $curTime.text(timeTransform(curTimeDistance));
	            });
	        }
	    }

	    // Pointer time conversion
	    function PointerLocate(displacement) {
	        const curClipItemsLength = $clipItems.find('li').length;
	        const maxClipWidth = (curClipItemsLength * _clipWidth);

	        if (displacement > maxClipWidth) {
	            displacement = maxClipWidth;
	        } else if (displacement < 0) {
	            displacement = 0;
	        }

	        const multiple = parseInt(displacement / _clipWidth);
	        const residue = (displacement % _clipWidth);
	        const _curStart = timeTransform($clipItems.find('li').eq(multiple).find('.clip-time-start').text());
	        const _curEnd = timeTransform($clipItems.find('li').eq(multiple).find('.clip-time-end').text());
	        let _curTime = parseInt((residue / _clipWidth) * (_curEnd - _curStart)) + _curStart;

	        if (multiple === curClipItemsLength) {
	            _curTime = timeTransform($clipItems.find('li').eq(-1).find('.clip-time-end').text());
	        }

	        return _curTime;
	    }

	    // The Time transform
	    function timeTransform(value) {
	        let _result;

	        if (value === 0 || Number(value)) {
	            const _hour = Math.floor(parseInt(value) / 3600);
	            const _minute = parseInt((parseInt(value) - (_hour * 3600)) / 60);
	            const _second = parseInt(value) % 60;

	            _result = `${supple(_hour)}:${supple(_minute)}:${supple(_second)}`;
	        } else {
	            const _splitArr = value.split(':');

	            if (_splitArr.length < 3) {
	                _splitArr.unshift('00');
	            }

	            _result = parseInt(_splitArr[0] * 3600) + parseInt(_splitArr[1] * 60) + parseInt(_splitArr[2]);
	        }

	        return _result;

	        function supple(value) {
	            value = '' + value;

	            if (value.length === 1) {
	                value = '0' + value;
	            }

	            return value;
	        }
	    }

	    // The move of pointer
	    function pointerMove(distance) {
	        const curClipItemsLength = $clipItems.find('li').length;
	        const maxClipWidth = (curClipItemsLength * _clipWidth);
	        let goal;

	        if (distance > maxClipWidth) {
	            goal = maxClipWidth;
	        } else if (distance < 0) {
	            goal = 0;
	        } else {
	            goal = distance;
	        }

	        $pointer.css({ left: goal });
	    }

	    // console.log
	    function log(value) {
	        console.log(value);
	    }
	})();*/

/***/ }
]);